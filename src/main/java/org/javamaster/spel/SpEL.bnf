// 第七步:定义bnf语法
// 第八步:右键生成parse code
// 第九步:右键生成flex文件
{
  parserClass="org.javamaster.spel.parser.SpelParser"
  parserUtilClass="org.javamaster.spel.parser.SpelParserUtil"

  extends="org.javamaster.spel.SpelPsiElement"

  psiClassPrefix="Spel"
  psiImplClassSuffix="Impl"
  psiPackage="org.javamaster.spel.psi"
  psiImplPackage="org.javamaster.spel.psi.impl"

  elementTypeHolderClass="org.javamaster.spel.psi.SpelTypes"
  elementTypeClass="org.javamaster.spel.psi.SpelElementType"
  tokenTypeClass="org.javamaster.spel.psi.SpelTokenType"
  psiImplUtilClass="org.javamaster.spel.psi.impl.SpelPsiImplUtil"

  tokens=[
    SINGLE_QUOTED_STRING="regexp:\s*'([^\\\'\r\n]|\\[^\r\n])*'\s*"
    IDENTIFIER="regexp:[a-zA-Z][\w$]*"
    PLUS="regexp:\s*\+\s*"
    NUMBER='regexp:\s*-?(0|[1-9]\d*)(\.\d+)?([eE][+-]?\d*)?\s*'
    COMMA="regexp:\s*,\s*"
    EXPR="regexp:[\w=']+"
    STATIC_REFERENCE="regexp:T\([a-zA-Z][\w.$]*\)"
    SHARP="#"
    DOT="."
    PROJECTION=".!["
    SELECTION=".?["
    L_BRACKET="["
    R_BRACKET="]"
    L_PARENTHESES="("
    R_PARENTHESES=")"
    L_BRACE="{"
    R_BRACE="}"
  ]
}

spelFile ::= spel*
spel ::= root root_combination* {
    methods=[
       getReferences
    ]
}
string_literal ::= SINGLE_QUOTED_STRING
number_literal ::= NUMBER
field_name ::= IDENTIFIER {
    methods=[
        getReferences
    ]
}
field_or_method_name ::= IDENTIFIER {
   methods=[
       getReferences
   ]
}
static_t ::= STATIC_REFERENCE {
    methods=[
        getReferences
    ]
}
method_param ::= root {
    methods=[
        getReferences
    ]
}
method_params ::= method_param (COMMA method_param)*
method_call ::= L_PARENTHESES method_params? R_PARENTHESES {
    pin=1
}
selection_expression ::= EXPR
field_or_method ::= DOT field_or_method_name method_call? {
    pin=1
}
field_recursive_call ::= SHARP? field_name field_or_method*
collection_projection ::= PROJECTION field_recursive_call R_BRACKET {
    pin=1
}
collection_selection ::= SELECTION selection_expression R_BRACKET {
    pin=1
}
map_selection ::= L_BRACKET field_name R_BRACKET {
    pin=1
}
array_wrap ::= L_BRACE root (COMMA root)* R_BRACE {
    pin=1
}
root ::= (string_literal | number_literal | SHARP field_or_method_name | static_t | array_wrap) (field_or_method | method_call | map_selection | collection_projection | collection_selection)* {
    methods=[
        getReferences
    ]
}
root_combination ::= PLUS root {
    pin=1
}
