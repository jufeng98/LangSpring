// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _PointcutExpressionLexer.flex

package org.javamaster.pcel;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.javamaster.pcel.psi.PointcutExpressionTypes.*;


public class _PointcutExpressionLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u7300\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\5\1\22\0\1\1\1\2\4\0\1\3\1\0"+
    "\1\4\1\5\2\2\2\0\1\2\1\0\12\6\6\0"+
    "\1\7\32\10\4\0\1\6\1\0\1\11\1\12\1\13"+
    "\1\10\1\14\1\10\1\15\1\10\1\16\4\10\1\17"+
    "\1\20\2\10\1\21\1\10\1\22\1\23\2\10\1\24"+
    "\2\10\1\0\1\25\10\0\1\26\32\0\1\26\11\0"+
    "\1\27\12\0\1\27\4\0\1\27\5\0\27\27\1\0"+
    "\37\27\1\0\u01ca\27\4\0\14\27\16\0\5\27\7\0"+
    "\1\27\1\0\1\27\21\0\160\2\5\27\1\0\2\27"+
    "\2\0\4\27\1\0\1\27\6\0\1\27\1\0\3\27"+
    "\1\0\1\27\1\0\24\27\1\0\123\27\1\0\213\27"+
    "\1\0\7\2\246\27\1\0\46\27\2\0\1\27\6\0"+
    "\51\27\10\0\55\2\1\0\1\2\1\0\2\2\1\0"+
    "\2\2\1\0\1\2\10\0\33\27\4\0\4\27\35\0"+
    "\13\2\5\0\53\27\37\2\4\0\2\27\1\2\143\27"+
    "\1\0\1\27\7\2\2\0\6\2\2\27\2\2\1\0"+
    "\4\2\2\27\12\2\3\27\2\0\1\27\20\0\1\27"+
    "\1\2\36\27\33\2\2\0\131\27\13\2\1\27\16\0"+
    "\12\2\41\27\11\2\2\27\4\0\1\27\2\0\1\2"+
    "\2\0\26\27\4\2\1\27\11\2\1\27\3\2\1\27"+
    "\5\2\22\0\31\27\3\2\4\0\13\27\65\0\25\27"+
    "\1\0\10\27\25\0\17\2\1\0\41\2\66\27\3\2"+
    "\1\27\22\2\1\27\7\2\12\27\2\2\2\0\12\2"+
    "\1\0\20\27\3\2\1\0\10\27\2\0\2\27\2\0"+
    "\26\27\1\0\7\27\1\0\1\27\3\0\4\27\2\0"+
    "\1\2\1\27\7\2\2\0\2\2\2\0\3\2\1\27"+
    "\10\0\1\2\4\0\2\27\1\0\3\27\2\2\2\0"+
    "\12\2\2\27\12\0\1\27\1\0\1\2\2\0\3\2"+
    "\1\0\6\27\4\0\2\27\2\0\26\27\1\0\7\27"+
    "\1\0\2\27\1\0\2\27\1\0\2\27\2\0\1\2"+
    "\1\0\5\2\4\0\2\2\2\0\3\2\3\0\1\2"+
    "\7\0\4\27\1\0\1\27\7\0\14\2\3\27\1\2"+
    "\13\0\3\2\1\0\11\27\1\0\3\27\1\0\26\27"+
    "\1\0\7\27\1\0\2\27\1\0\5\27\2\0\1\2"+
    "\1\27\10\2\1\0\3\2\1\0\3\2\2\0\1\27"+
    "\17\0\2\27\2\2\2\0\12\2\11\0\1\27\6\2"+
    "\1\0\3\2\1\0\10\27\2\0\2\27\2\0\26\27"+
    "\1\0\7\27\1\0\2\27\1\0\5\27\2\0\1\2"+
    "\1\27\7\2\2\0\2\2\2\0\3\2\10\0\2\2"+
    "\4\0\2\27\1\0\3\27\2\2\2\0\12\2\1\0"+
    "\1\27\20\0\1\2\1\27\1\0\6\27\3\0\3\27"+
    "\1\0\4\27\3\0\2\27\1\0\1\27\1\0\2\27"+
    "\3\0\2\27\3\0\3\27\3\0\14\27\4\0\5\2"+
    "\3\0\3\2\1\0\4\2\2\0\1\27\6\0\1\2"+
    "\16\0\12\2\20\0\5\2\10\27\1\0\3\27\1\0"+
    "\27\27\1\0\20\27\3\0\1\27\7\2\1\0\3\2"+
    "\1\0\4\2\7\0\2\2\1\0\3\27\5\0\2\27"+
    "\2\2\2\0\12\2\20\0\1\27\3\2\1\0\10\27"+
    "\1\0\3\27\1\0\27\27\1\0\12\27\1\0\5\27"+
    "\2\0\1\2\1\27\7\2\1\0\3\2\1\0\4\2"+
    "\7\0\2\2\7\0\1\27\1\0\2\27\2\2\2\0"+
    "\12\2\1\0\2\27\15\0\4\2\1\0\10\27\1\0"+
    "\3\27\1\0\51\27\2\2\1\27\7\2\1\0\3\2"+
    "\1\0\4\2\1\27\5\0\3\27\1\2\7\0\3\27"+
    "\2\2\2\0\12\2\12\0\6\27\2\0\2\2\1\0"+
    "\22\27\3\0\30\27\1\0\11\27\1\0\1\27\2\0"+
    "\7\27\3\0\1\2\4\0\6\2\1\0\1\2\1\0"+
    "\10\2\6\0\12\2\2\0\2\2\15\0\60\27\1\2"+
    "\2\27\7\2\5\0\7\27\10\2\1\0\12\2\47\0"+
    "\2\27\1\0\1\27\1\0\5\27\1\0\30\27\1\0"+
    "\1\27\1\0\12\27\1\2\2\27\11\2\1\27\2\0"+
    "\5\27\1\0\1\27\1\0\6\2\2\0\12\2\2\0"+
    "\4\27\40\0\1\27\27\0\2\2\6\0\12\2\13\0"+
    "\1\2\1\0\1\2\1\0\1\2\4\0\2\2\10\27"+
    "\1\0\44\27\4\0\24\2\1\0\2\2\5\27\13\2"+
    "\1\0\44\2\11\0\1\2\71\0\53\27\24\2\1\27"+
    "\12\2\6\0\6\27\4\2\4\27\3\2\1\27\3\2"+
    "\2\27\7\2\3\27\4\2\15\27\14\2\1\27\17\2"+
    "\2\0\46\27\1\0\1\27\5\0\1\27\2\0\53\27"+
    "\1\0\115\27\1\0\4\27\2\0\7\27\1\0\1\27"+
    "\1\0\4\27\2\0\51\27\1\0\4\27\2\0\41\27"+
    "\1\0\4\27\2\0\7\27\1\0\1\27\1\0\4\27"+
    "\2\0\17\27\1\0\71\27\1\0\4\27\2\0\103\27"+
    "\2\0\3\2\40\0\20\27\20\0\126\27\2\0\6\27"+
    "\3\0\u016c\27\2\0\21\27\1\26\32\27\5\0\113\27"+
    "\3\0\3\2\10\27\7\0\15\27\1\0\4\27\3\2"+
    "\13\0\22\27\3\2\13\0\22\27\2\2\14\0\15\27"+
    "\1\0\3\27\1\0\2\2\14\0\64\27\40\2\3\0"+
    "\1\27\4\0\1\27\1\2\2\0\12\2\41\0\3\2"+
    "\2\0\12\2\6\0\131\27\7\0\5\27\2\2\42\27"+
    "\1\2\1\27\5\0\106\27\12\0\37\27\1\0\14\2"+
    "\4\0\14\2\12\0\12\2\36\27\2\0\5\27\13\0"+
    "\54\27\4\0\32\27\6\0\12\2\46\0\27\27\5\2"+
    "\4\0\65\27\12\2\1\0\35\2\2\0\13\2\6\0"+
    "\12\2\15\0\1\27\10\0\17\2\101\0\5\2\57\27"+
    "\21\2\7\27\4\0\12\2\21\0\11\2\14\0\3\2"+
    "\36\27\15\2\2\27\12\2\54\27\16\2\14\0\44\27"+
    "\24\2\10\0\12\2\3\0\3\27\12\2\44\27\2\0"+
    "\11\27\7\0\53\27\2\0\3\27\20\0\3\2\1\0"+
    "\25\2\4\27\1\2\6\27\1\2\2\27\3\2\1\27"+
    "\5\0\300\27\72\2\1\0\5\2\26\27\2\0\6\27"+
    "\2\0\46\27\2\0\6\27\2\0\10\27\1\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\37\27\2\0\65\27"+
    "\1\0\7\27\1\0\1\27\3\0\3\27\1\0\7\27"+
    "\3\0\4\27\2\0\6\27\4\0\15\27\5\0\3\27"+
    "\1\0\7\27\3\0\13\26\35\0\2\26\5\0\1\26"+
    "\17\0\2\2\23\0\1\2\12\0\1\26\21\0\1\27"+
    "\15\0\1\27\20\0\15\27\63\0\41\2\21\0\1\27"+
    "\4\0\1\27\2\0\12\27\1\0\1\27\3\0\5\27"+
    "\6\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\1\0\13\27\2\0\4\27\5\0\5\27\4\0\1\27"+
    "\21\0\43\2\2\27\4\2\u022d\0\64\2\26\0\57\27"+
    "\1\0\57\27\1\0\205\27\6\0\4\27\3\2\2\27"+
    "\14\0\46\27\1\0\1\27\5\0\1\27\2\0\70\27"+
    "\7\0\1\27\17\0\1\2\27\27\11\0\7\27\1\0"+
    "\7\27\1\0\7\27\1\0\7\27\1\0\7\27\1\0"+
    "\7\27\1\0\7\27\1\0\7\27\1\0\40\2\57\0"+
    "\1\27\320\0\1\26\4\0\2\27\1\2\31\0\17\2"+
    "\1\0\5\27\2\0\3\2\2\27\4\0\126\27\2\0"+
    "\2\2\2\0\3\27\1\0\132\27\1\0\4\27\5\0"+
    "\53\27\1\0\136\27\21\0\33\27\65\0\306\27\112\0"+
    "\360\27\20\0\215\27\103\0\56\27\2\0\15\27\3\0"+
    "\20\27\12\2\2\27\24\0\57\27\4\2\1\0\12\2"+
    "\1\0\37\27\2\2\106\27\14\2\45\0\11\27\2\0"+
    "\147\27\2\0\65\27\2\0\5\27\60\0\13\27\1\2"+
    "\3\27\1\2\4\27\1\2\27\27\5\2\30\0\64\27"+
    "\14\0\2\2\62\27\22\2\12\0\12\2\6\0\22\2"+
    "\6\27\3\0\1\27\1\0\2\27\13\2\34\27\10\2"+
    "\2\0\27\27\15\2\14\0\35\27\3\0\4\2\57\27"+
    "\16\2\16\0\1\27\12\2\6\0\5\27\1\2\12\27"+
    "\12\2\5\27\1\0\51\27\16\2\11\0\3\27\1\2"+
    "\10\27\2\2\2\0\12\2\6\0\27\27\3\0\1\27"+
    "\3\2\62\27\1\2\1\27\3\2\2\27\2\2\5\27"+
    "\2\2\1\27\1\2\1\27\30\0\3\27\2\0\13\27"+
    "\5\2\2\0\3\27\2\2\12\0\6\27\2\0\6\27"+
    "\2\0\6\27\11\0\7\27\1\0\7\27\1\0\53\27"+
    "\1\0\14\27\10\0\163\27\10\2\1\0\2\2\2\0"+
    "\12\2\6\0\244\27\14\0\27\27\4\0\61\27\4\0"+
    "\156\27\2\0\152\27\46\0\7\27\14\0\5\27\5\0"+
    "\1\27\1\2\12\27\1\0\15\27\1\0\5\27\1\0"+
    "\1\27\1\0\2\27\1\0\2\27\1\0\154\27\41\0"+
    "\153\27\22\0\100\27\2\0\66\27\50\0\14\27\4\0"+
    "\20\2\20\0\20\2\3\0\2\2\30\0\3\2\40\0"+
    "\5\27\1\0\207\27\23\0\12\2\7\0\32\27\4\0"+
    "\1\2\1\0\32\27\13\0\131\27\3\0\6\27\2\0"+
    "\6\27\2\0\6\27\2\0\3\27\43\0\14\27\1\0"+
    "\32\27\1\0\23\27\1\0\2\27\1\0\17\27\2\0"+
    "\16\27\42\0\173\27\105\0\65\2\210\0\1\2\202\0"+
    "\35\27\3\0\61\27\17\0\1\2\37\0\40\27\15\0"+
    "\24\27\1\2\10\27\1\2\5\0\46\27\5\2\5\0"+
    "\36\27\2\0\44\27\4\0\10\27\1\0\5\2\52\0"+
    "\236\27\2\0\12\2\6\0\44\27\4\0\44\27\4\0"+
    "\50\27\10\0\64\27\234\0\67\27\11\0\26\27\12\0"+
    "\10\27\230\0\6\27\2\0\1\27\1\0\54\27\1\0"+
    "\2\27\3\0\1\27\2\0\27\27\12\0\27\27\11\0"+
    "\37\27\101\0\23\27\1\0\2\27\12\0\26\27\12\0"+
    "\32\27\106\0\70\27\6\0\2\27\100\0\1\27\3\2"+
    "\1\0\2\2\5\0\4\2\4\27\1\0\3\27\1\0"+
    "\35\27\2\0\3\2\4\0\1\2\40\0\35\27\3\0"+
    "\35\27\43\0\10\27\1\0\34\27\2\2\31\0\66\27"+
    "\12\0\26\27\12\0\23\27\15\0\22\27\156\0\111\27"+
    "\67\0\63\27\15\0\63\27\15\0\44\27\4\2\10\0"+
    "\12\2\306\0\35\27\12\0\1\27\10\0\26\27\13\2"+
    "\217\0\27\27\11\0\3\2\65\27\17\2\37\0\12\2"+
    "\17\0\4\2\55\27\13\2\25\0\31\27\7\0\12\2"+
    "\6\0\3\2\44\27\16\2\1\0\12\2\4\0\1\27"+
    "\2\2\11\0\43\27\1\2\2\0\1\27\11\0\3\2"+
    "\60\27\16\2\4\27\4\0\4\2\3\0\12\2\1\27"+
    "\1\0\1\27\43\0\22\27\1\0\31\27\14\2\6\0"+
    "\1\2\101\0\7\27\1\0\1\27\1\0\4\27\1\0"+
    "\17\27\1\0\12\27\7\0\57\27\14\2\5\0\12\2"+
    "\6\0\4\2\1\0\10\27\2\0\2\27\2\0\26\27"+
    "\1\0\7\27\1\0\2\27\1\0\5\27\1\0\2\2"+
    "\1\27\7\2\2\0\2\2\2\0\3\2\2\0\1\27"+
    "\6\0\1\2\5\0\5\27\2\2\2\0\7\2\3\0"+
    "\5\2\213\0\65\27\22\2\4\27\5\0\12\2\4\0"+
    "\1\2\1\27\40\0\60\27\24\2\2\27\1\0\1\27"+
    "\10\0\12\2\246\0\57\27\7\2\2\0\11\2\27\0"+
    "\4\27\2\2\42\0\60\27\21\2\3\0\1\27\13\0"+
    "\12\2\46\0\53\27\15\2\1\27\7\0\12\2\66\0"+
    "\33\27\2\0\17\2\4\0\12\2\306\0\54\27\17\2"+
    "\145\0\100\27\12\2\25\0\1\27\240\0\10\27\2\0"+
    "\47\27\7\2\2\0\7\2\1\27\1\0\1\27\1\2"+
    "\33\0\1\27\12\2\50\27\7\2\1\27\4\2\10\0"+
    "\1\2\10\0\1\27\13\2\56\27\20\2\3\0\1\27"+
    "\42\0\71\27\7\0\11\27\1\0\45\27\10\2\1\0"+
    "\10\2\1\27\17\0\12\2\30\0\36\27\2\0\26\2"+
    "\1\0\16\2\111\0\7\27\1\0\2\27\1\0\46\27"+
    "\6\2\3\0\1\2\1\0\2\2\1\0\7\2\1\27"+
    "\1\2\10\0\12\2\6\0\6\27\1\0\2\27\1\0"+
    "\40\27\5\2\1\0\2\2\1\0\5\2\1\27\7\0"+
    "\12\2\u0136\0\23\27\4\2\11\0\232\27\146\0\157\2"+
    "\21\0\304\27\274\0\57\27\321\0\107\27\271\0\71\27"+
    "\7\0\37\27\1\0\12\2\146\0\36\27\2\0\5\2"+
    "\13\0\60\27\7\2\11\0\4\27\14\0\12\2\11\0"+
    "\25\27\5\0\23\27\260\0\100\27\200\0\113\27\4\0"+
    "\1\2\1\27\67\2\7\0\4\2\15\27\100\0\2\27"+
    "\1\0\1\27\34\0\370\27\10\0\363\27\15\0\37\27"+
    "\61\0\3\27\21\0\4\27\10\0\u018c\27\4\0\153\27"+
    "\5\0\15\27\3\0\11\27\7\0\12\27\3\0\2\2"+
    "\306\0\5\2\3\0\6\2\10\0\10\2\2\0\7\2"+
    "\36\0\4\2\224\0\3\2\273\0\125\27\1\0\107\27"+
    "\1\0\2\27\2\0\1\27\2\0\2\27\2\0\4\27"+
    "\1\0\14\27\1\0\1\27\1\0\7\27\1\0\101\27"+
    "\1\0\4\27\2\0\10\27\1\0\7\27\1\0\34\27"+
    "\1\0\4\27\1\0\5\27\1\0\1\27\3\0\7\27"+
    "\1\0\u0154\27\2\0\31\27\1\0\31\27\1\0\37\27"+
    "\1\0\31\27\1\0\37\27\1\0\31\27\1\0\37\27"+
    "\1\0\31\27\1\0\37\27\1\0\31\27\1\0\10\27"+
    "\2\0\151\2\4\0\62\2\10\0\1\2\16\0\1\2"+
    "\26\0\5\2\1\0\17\2\120\0\7\2\1\0\21\2"+
    "\2\0\7\2\1\0\2\2\1\0\5\2\325\0\55\27"+
    "\3\0\7\2\7\27\2\0\12\2\4\0\1\27\u0171\0"+
    "\54\27\16\2\6\0\305\27\13\0\7\2\51\0\104\27"+
    "\7\2\1\27\4\0\12\2\246\0\4\27\1\0\33\27"+
    "\1\0\2\27\1\0\1\27\2\0\1\27\1\0\12\27"+
    "\1\0\4\27\1\0\1\27\1\0\1\27\6\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\1\0\2\27\1\0\1\27\2\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\1\27\1\0\2\27"+
    "\1\0\1\27\2\0\4\27\1\0\7\27\1\0\4\27"+
    "\1\0\4\27\1\0\1\27\1\0\12\27\1\0\21\27"+
    "\5\0\3\27\1\0\5\27\1\0\21\27\164\0\32\2"+
    "\6\0\32\2\6\0\32\2\166\0\327\27\51\0\65\27"+
    "\13\0\336\27\2\0\u0182\27\16\0\u0131\27\37\0\36\27"+
    "\342\0\360\2\20\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\1\3\3\1\1"+
    "\1\2\1\1\2\0\1\4\4\0\2\3\1\5\1\0"+
    "\1\6\2\0\1\7\2\3\2\0\1\10\1\3\2\0"+
    "\1\3\2\0\1\3\1\0\1\11\1\3\1\0\1\3"+
    "\1\0\1\12\1\0\1\13";

  private static int [] zzUnpackAction() {
    int [] result = new int[49];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\30\0\60\0\110\0\140\0\170\0\220\0\250"+
    "\0\300\0\330\0\360\0\u0108\0\u0120\0\110\0\360\0\u0138"+
    "\0\u0150\0\u0168\0\u0180\0\u0198\0\u01b0\0\u01c8\0\u01e0\0\u0120"+
    "\0\u0150\0\u01f8\0\u0210\0\30\0\u0228\0\u0240\0\u0258\0\u0270"+
    "\0\250\0\u0288\0\u02a0\0\u02b8\0\u02d0\0\u02e8\0\u0300\0\u0318"+
    "\0\u0330\0\30\0\u0348\0\u0360\0\u0378\0\u0390\0\250\0\u03a8"+
    "\0\30";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[49];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\2\1\6\1\7"+
    "\2\10\1\11\1\10\1\12\10\10\1\13\1\14\1\15"+
    "\31\0\1\3\1\0\1\16\21\0\1\17\1\14\4\0"+
    "\1\20\25\0\2\21\1\0\3\21\1\0\15\21\1\0"+
    "\2\21\6\0\1\6\1\0\15\6\14\0\1\22\10\0"+
    "\1\23\11\0\1\24\1\0\1\10\1\0\15\10\7\0"+
    "\1\24\1\0\1\10\1\0\4\10\1\25\10\10\7\0"+
    "\1\24\1\0\1\10\1\0\14\10\1\26\30\0\1\27"+
    "\3\0\1\14\24\0\1\14\5\0\1\24\1\0\1\30"+
    "\1\0\15\30\4\0\1\20\27\0\2\21\1\0\1\21"+
    "\1\31\1\21\1\0\15\21\1\0\2\21\17\0\1\32"+
    "\21\0\1\33\23\0\1\34\26\0\1\24\1\0\1\10"+
    "\1\0\1\10\1\35\13\10\7\0\1\24\1\0\1\10"+
    "\1\0\4\10\1\36\10\10\4\0\1\27\45\0\1\37"+
    "\31\0\1\40\12\0\1\24\1\0\1\10\1\0\7\10"+
    "\1\41\5\10\7\0\1\24\1\0\1\10\1\0\3\10"+
    "\1\42\11\10\23\0\1\43\24\0\1\44\16\0\1\24"+
    "\1\0\1\10\1\0\13\10\1\45\1\10\25\0\1\46"+
    "\21\0\1\47\17\0\1\24\1\0\1\10\1\0\12\10"+
    "\1\50\2\10\14\0\1\51\40\0\1\52\11\0\1\24"+
    "\1\0\1\10\1\0\6\10\1\53\6\10\25\0\1\54"+
    "\11\0\1\24\1\0\1\10\1\0\10\10\1\55\4\10"+
    "\21\0\1\56\15\0\1\24\1\0\1\10\1\0\7\10"+
    "\1\57\5\10\23\0\1\60\26\0\1\61\10\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[960];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\13\1\2\0\1\1\4\0\3\1\1\0"+
    "\1\1\2\0\1\11\2\1\2\0\2\1\2\0\1\1"+
    "\2\0\1\1\1\0\1\11\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[49];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _PointcutExpressionLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _PointcutExpressionLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 12: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 13: break;
          case 3:
            { return WORD;
            }
          // fall through
          case 14: break;
          case 4:
            { return AND_OPERATOR;
            }
          // fall through
          case 15: break;
          case 5:
            { return OR_OPERATOR;
            }
          // fall through
          case 16: break;
          case 6:
            { return EXPR_PATTERN;
            }
          // fall through
          case 17: break;
          case 7:
            { return METHOD_REFERENCE;
            }
          // fall through
          case 18: break;
          case 8:
            { return BEAN;
            }
          // fall through
          case 19: break;
          case 9:
            { return AT_TARGET;
            }
          // fall through
          case 20: break;
          case 10:
            { return EXECUTION;
            }
          // fall through
          case 21: break;
          case 11:
            { return AT_ANNOTATION;
            }
          // fall through
          case 22: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
